/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface PaymentInterface extends utils.Interface {
  functions: {
    "changePubKey(bytes)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositERC(uint256,address,uint8,uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getPubKey()": FunctionFragment;
    "pause(uint256)": FunctionFragment;
    "resetWithdrawalLimit()": FunctionFragment;
    "resume()": FunctionFragment;
    "withdraw(uint256,uint256,address,uint8,bytes32,bytes)": FunctionFragment;
    "withdrawERC(uint256,uint256,address,uint8,address,bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changePubKey"
      | "deposit"
      | "depositERC"
      | "getBalance"
      | "getPubKey"
      | "pause"
      | "resetWithdrawalLimit"
      | "resume"
      | "withdraw"
      | "withdrawERC"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changePubKey",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPubKey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetWithdrawalLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "changePubKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositERC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPubKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetWithdrawalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(address,uint256,uint256)": EventFragment;
    "ERC20Deposited(address,uint256,address)": EventFragment;
    "ERC20Withdraw(address,uint256,address)": EventFragment;
    "Validate(address,address,uint8)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Validate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositedEventObject {
  sender: string;
  amount: BigNumber;
  userId: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface ERC20DepositedEventObject {
  from: string;
  amount: BigNumber;
  tokenAddress: string;
}
export type ERC20DepositedEvent = TypedEvent<
  [string, BigNumber, string],
  ERC20DepositedEventObject
>;

export type ERC20DepositedEventFilter = TypedEventFilter<ERC20DepositedEvent>;

export interface ERC20WithdrawEventObject {
  to: string;
  amount: BigNumber;
  tokenAddress: string;
}
export type ERC20WithdrawEvent = TypedEvent<
  [string, BigNumber, string],
  ERC20WithdrawEventObject
>;

export type ERC20WithdrawEventFilter = TypedEventFilter<ERC20WithdrawEvent>;

export interface ValidateEventObject {
  recovered: string;
  owner: string;
  errorType: number;
}
export type ValidateEvent = TypedEvent<
  [string, string, number],
  ValidateEventObject
>;

export type ValidateEventFilter = TypedEventFilter<ValidateEvent>;

export interface WithdrawEventObject {
  receiver: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Payment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaymentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changePubKey(
      pubKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      userid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPubKey(overrides?: CallOverrides): Promise<[string]>;

    pause(
      amountSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetWithdrawalLimit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resume(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      txid: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC(
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      txid: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  changePubKey(
    pubKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC(
    amount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    currency: PromiseOrValue<BigNumberish>,
    userid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getPubKey(overrides?: CallOverrides): Promise<string>;

  pause(
    amountSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetWithdrawalLimit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resume(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    currency: PromiseOrValue<BigNumberish>,
    txid: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC(
    amount: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    currency: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    txid: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changePubKey(
      pubKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      userid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getPubKey(overrides?: CallOverrides): Promise<string>;

    pause(
      amountSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetWithdrawalLimit(overrides?: CallOverrides): Promise<void>;

    resume(overrides?: CallOverrides): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      txid: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC(
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      txid: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposited(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      userId?: null
    ): DepositedEventFilter;
    Deposited(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      userId?: null
    ): DepositedEventFilter;

    "ERC20Deposited(address,uint256,address)"(
      from?: null,
      amount?: null,
      tokenAddress?: null
    ): ERC20DepositedEventFilter;
    ERC20Deposited(
      from?: null,
      amount?: null,
      tokenAddress?: null
    ): ERC20DepositedEventFilter;

    "ERC20Withdraw(address,uint256,address)"(
      to?: null,
      amount?: null,
      tokenAddress?: null
    ): ERC20WithdrawEventFilter;
    ERC20Withdraw(
      to?: null,
      amount?: null,
      tokenAddress?: null
    ): ERC20WithdrawEventFilter;

    "Validate(address,address,uint8)"(
      recovered?: null,
      owner?: null,
      errorType?: null
    ): ValidateEventFilter;
    Validate(
      recovered?: null,
      owner?: null,
      errorType?: null
    ): ValidateEventFilter;

    "Withdraw(address,uint256)"(
      receiver?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(receiver?: null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    changePubKey(
      pubKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      userid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getPubKey(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      amountSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetWithdrawalLimit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resume(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      txid: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC(
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      txid: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changePubKey(
      pubKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      userid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPubKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      amountSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetWithdrawalLimit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resume(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      txid: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC(
      amount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      currency: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      txid: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
